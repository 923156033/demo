<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd"
       default-lazy-init="false">

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="10000"/>
        <property name="logSlowSql" value="true"/>
    </bean>
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
        <property name="resultSetLogEnabled" value="false"/>
    </bean>

    <beans profile="development">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean id="propertyPlaceholderConfigurer" class="com.entdiy.core.context.SpringPropertiesHolder">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                    <value>classpath:/captcha.properties</value>
                    <value>classpath:/jdbc.properties</value>
                    <value>file:/etc/entdiy/config/application.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true"/>
        </bean>

        <!-- JDBC连接池  https://github.com/alibaba/druid/wiki/配置_DruidDataSource参考配置 -->
        <bean id="druidDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
              destroy-method="close">

            <!-- 配置初始化大小、最小、最大 -->
            <property name="initialSize" value="${jdbc.initial.size}"/>
            <property name="minIdle" value="${jdbc.min.idle}"/>
            <property name="maxActive" value="${jdbc.max.active}"/>

            <!-- 由外部事务管理器处理提交 -->
            <property name="defaultAutoCommit" value="false"/>

            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="60000"/>

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="300000"/>

            <property name="validationQuery" value="SELECT 'x'"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>

            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="false"/>
            <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <property name="proxyFilters">
                <list>
                    <ref bean="stat-filter"/>
                    <ref bean="log-filter"/>
                </list>
            </property>
        </bean>

        <!-- 读写分离主库 -->
        <bean id="dataSourceMaster" parent="druidDataSource">
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>

        <!-- 读写分离只读从库，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave01" parent="druidDataSource">
            <property name="url" value="${jdbc.url.slave01}"/>
            <property name="username" value="${jdbc.username.slave01}"/>
            <property name="password" value="${jdbc.password.slave01}"/>
        </bean>

        <!-- 读写分离只读从库，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave02" parent="druidDataSource">
            <property name="url" value="${jdbc.url.slave02}"/>
            <property name="username" value="${jdbc.username.slave02}"/>
            <property name="password" value="${jdbc.password.slave02}"/>
        </bean>

        <!-- 支持注解路由的数据源 -->
        <bean id="dataSource" class="com.entdiy.core.dao.router.AnnotationRoutingDataSource">
            <property name="targetDataSources">
                <map>
                    <entry key="slave" value-ref="dataSourceSlave"/>
                    <entry key="master" value-ref="dataSourceMaster"/>
                </map>
            </property>
            <property name="defaultTargetDataSource" ref="dataSourceMaster"/>
        </bean>

        <!-- 支持随机路由的只读从库数据源，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave" class="com.entdiy.core.dao.router.RandomRoutingDataSource">
            <property name="dataSources">
                <list>
                    <ref bean="dataSourceSlave01"/>
                    <ref bean="dataSourceSlave02"/>
                </list>
            </property>
        </bean>

        <!-- Quartz直接采用标准的spring jdbc数据源， -->
        <bean id="dataSourceQuartz" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${jdbc.driverClassName}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>

        <import resource="classpath:/context/spring*.xml"/>
        <import resource="classpath*:/service/spring*.xml"/>
    </beans>

    <beans profile="production">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean id="propertyPlaceholderConfigurer" class="com.entdiy.core.context.SpringPropertiesHolder">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                    <value>classpath:/captcha.properties</value>
                    <value>classpath:/application.prd.properties</value>
                    <value>file:/etc/entdiy/config/application.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true"/>
        </bean>

        <!-- JDBC连接池  https://github.com/alibaba/druid/wiki/配置_DruidDataSource参考配置 -->
        <bean id="druidDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
              destroy-method="close">

            <!-- 配置初始化大小、最小、最大 -->
            <property name="initialSize" value="${jdbc.initial.size}"/>
            <property name="minIdle" value="${jdbc.min.idle}"/>
            <property name="maxActive" value="${jdbc.max.active}"/>

            <!-- 由外部事务管理器处理提交 -->
            <property name="defaultAutoCommit" value="false"/>

            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="60000"/>

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="300000"/>

            <property name="validationQuery" value="SELECT 'x'"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>

            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="false"/>
            <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <property name="proxyFilters">
                <list>
                    <ref bean="stat-filter"/>
                    <ref bean="log-filter"/>
                </list>
            </property>
        </bean>

        <!-- 读写分离主库 -->
        <bean id="dataSourceMaster" parent="druidDataSource">
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>

        <!-- 读写分离只读从库，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave01" parent="druidDataSource">
            <property name="url" value="${jdbc.url.slave01}"/>
            <property name="username" value="${jdbc.username.slave01}"/>
            <property name="password" value="${jdbc.password.slave01}"/>
        </bean>

        <!-- 读写分离只读从库，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave02" parent="druidDataSource">
            <property name="url" value="${jdbc.url.slave02}"/>
            <property name="username" value="${jdbc.username.slave02}"/>
            <property name="password" value="${jdbc.password.slave02}"/>
        </bean>

        <!-- 支持注解路由的数据源 -->
        <bean id="dataSource" class="com.entdiy.core.dao.router.AnnotationRoutingDataSource">
            <property name="targetDataSources">
                <map>
                    <entry key="slave" value-ref="dataSourceSlave"/>
                    <entry key="master" value-ref="dataSourceMaster"/>
                </map>
            </property>
            <property name="defaultTargetDataSource" ref="dataSourceMaster"/>
        </bean>

        <!-- 支持随机路由的只读从库数据源，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave" class="com.entdiy.core.dao.router.RandomRoutingDataSource">
            <property name="dataSources">
                <list>
                    <ref bean="dataSourceSlave01"/>
                    <ref bean="dataSourceSlave02"/>
                </list>
            </property>
        </bean>

        <!-- Quartz直接采用标准的spring jdbc数据源， -->
        <bean id="dataSourceQuartz" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${jdbc.driverClassName}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>

        <import resource="classpath:/context/spring*.xml"/>
        <import resource="classpath*:/service/spring*.xml"/>
    </beans>

    <!-- 用于Unit Test配置 -->
    <beans profile="test">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean id="propertyPlaceholderConfigurer" class="com.entdiy.core.context.SpringPropertiesHolder">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                    <value>classpath:/application-test.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true"/>
        </bean>

        <!-- 嵌入式内存中数据库 -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <!-- 基本属性 url、user、password -->
            <property name="url" value="jdbc:h2:mem:entdiy"/>
            <property name="username" value="sa"/>
            <property name="password" value=""/>

            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <property name="proxyFilters">
                <list>
                    <ref bean="log-filter"/>
                </list>
            </property>
        </bean>

        <!-- 支持随机路由的只读从库数据源，可根据实际从库数量增减定义 -->
        <bean id="dataSourceSlave" class="com.entdiy.core.dao.router.RandomRoutingDataSource">
            <property name="dataSources">
                <list>
                    <ref bean="dataSource"/>
                </list>
            </property>
        </bean>

        <!-- Quartz直接采用标准的spring jdbc数据源， -->
        <bean id="dataSourceQuartz" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="org.h2.Driver"/>
            <property name="url" value="jdbc:h2:mem:h2db-quartz"/>
            <property name="username" value="sa"/>
            <property name="password" value=""/>
        </bean>
    </beans>

</beans>
